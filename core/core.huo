(def max x y (if (> x y)(return x)(return y)))

(def min x y (if (< x y)(return x)(return y)))

(def join arr str
    (reduce arr acc cur (cat (cat acc str) cur))
)

(def char_to_int str
    (switch str
        (= "1" (return 1))
        (= "2" (return 2))
        (= "3" (return 3))
        (= "4" (return 4))
        (= "5" (return 5))
        (= "6" (return 6))
        (= "7" (return 7))
        (= "8" (return 8))
        (= "9" (return 9))
        (= "0" (return 0))
    )
)

(def exponent n x
    (do
        (let result n)
        (for 1 x
            (let result (* result n))
        )
        (return result)
    )
)

(def str_to_int str
    (do
        (let counter (- (length str) 1))
        (let i 0)
        (let result 0)
        (for 0 (length str)
            (do
                (let result
                    (+ result
                        (if (> counter 1)
                            (*
                                (char_to_int (index i str))
                                (exponent 10 counter)
                            )
                                (if (> counter 0)
                                    (* (char_to_int (index i str)) 10)
                                    (char_to_int (index i str)))
                        )
                    )
                )
                (let counter (- counter 1))
                (let i (+ i 1))
            )
        )
        (return result)
    )
)
